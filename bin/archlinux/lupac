#!/usr/bin/python2

# Least Used PACkages v0.0.7a
# ---------------------------
# Luiz Ribeiro
# luizribeiro aaattt gmail dddooottt com
# venox @ irc.freenode.net

import os
import re
import datetime
import time
import sys
import getopt
import locale

from operator import itemgetter

def usage():
	print "Usage: %s [OPTIONS]" % (sys.argv[0])
	print "Lists the installed packages sorted by usage."
	print "  -a <N>, --ago=<N>   lists only packages that have not been used for <N> days or more"
	print "  -q, --quiet         don't display status messages"
	print "  -n, --notable       don't display output in a fancy table"
	print "  -d, --nodeps        don't check for dependencies while processing (faster, poor results)"
	print "  -s, --stripdeps     don't show dependencies on the output list (doesn't work with -d)"
	print "  -y, --days          shows for how long, in days, each package hasn't been used"
	print "  -h, --help          shows this help screen"


def sysexec(cmdLine):
	cmd = os.popen(cmdLine)
	return cmd.read()


def propagateAccessTime(list, depslist, package, accessTime):
	if not list.has_key(package) or list[package] < accessTime:
		list[package] = accessTime
		output = sysexec("LC_ALL=C pacman -Qi '%s' 2>>/dev/null| grep Depends | sed 's/^.*: //g;s/>[^ ]*//g;s/\ \+/\ /g'" % (package))
		deps = output.split('\n')[0]
		for dep in deps.split(' '):
			if not dep or dep == "None": continue
			depslist[dep] = True
			propagateAccessTime(list, depslist, dep, accessTime)

def main():
	try:
		opts, args = getopt.getopt(sys.argv[1:], "hqndsya:", ["help", "quiet", "notable", "nodeps", "stripdeps", "days", "ago="])
	except getopt.GetoptError:
		# print help information and exit:
		usage()
		sys.exit(2)

	# default values	
	a = 0					# list only packages that have not been used by at least 'a' days
	quiet = False			# display status messages
	noTable = False			# display results in a fancy table
	noDeps = False			# check for dependencies while processing
	showDays = False			# shows for how long packages have been unused, in days
	stripDeps = False			# strip dependencies from the output

	for opt, arg in opts:
		if opt in ("-a", "--ago"):
			try:
				a = int(arg)
			except ValueError:
				usage()
				sys.exit(2)
		if opt in ("-d", "--nodeps"):
			noDeps = True
		if opt in ("-n", "--notable"):
			noTable = True
		if opt in ("-q", "--quiet"):
			quiet = True
		if opt in ("-s", "--stripdeps"):
			stripDeps = True
		if opt in ("-y", "--days"):
			showDays = True
		if opt in ("-h", "--help"):
			usage()
			sys.exit()

	####

	if not quiet:
		print "Fetching packages database from pacman... ",
		sys.stdout.flush()
	pacmanOutput = sysexec("pacman -Ql")
	outputLines = pacmanOutput.split('\n')
	if not quiet:
		print "OK"
	
	####
	
	if not quiet:
		print "Parsing database... ",
		sys.stdout.flush()
	deps = {}				# dependencies list
	ltup = {}				# packages list
	gpn = 0				# greatest package length (used to create the fancy table)
	for line in outputLines:
		if line:
			# if the line is not empty
			(package, file) = line.split(' ', 1)
			if os.path.exists(file) and not os.path.isdir(file) and os.stat(file)[7] > 0:
				lastTime = os.stat(file)[7]
				if len(package) > gpn: gpn = len(package)
				if not deps.has_key(package): deps[package] = False
				if noDeps:
					if not ltup.has_key(package) or ltup[package] < lastTime:
						ltup[package] = lastTime
				else: propagateAccessTime(ltup, deps, package, lastTime)
	if not quiet:
		print "OK"
	
	####
	
	if not quiet:
		print "Sorting results... ",
		sys.stdout.flush()
	ltup = sorted(ltup.items(), key=itemgetter(1))
	if not quiet:
		print "OK"
	
	####
	
	if not quiet:
		print "\nSystem packages sorted by usage:"
	now = time.time()
	timeAgo = now - a * 3600 * 24
	for (package, lastAccess) in ltup:
		if timeAgo < lastAccess: continue
		if stripDeps and deps[package]: continue
		if noTable: space = ' '
		else: space = (gpn + 3 - len(package)) * ' '
		if showDays: print "%s%s%s days" % (package, space, int((now-lastAccess)/(3600*24)))
		else: print "%s%s%s" % (package, space, datetime.datetime.fromtimestamp(lastAccess).ctime())

if __name__ == "__main__":
	main()

